// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, firstname,lastname,email,age,created
) VALUES (
  $1, $2, $3, $4, $5 ,$6
)
RETURNING id, firstname, lastname, email, age, created
`

type CreateUserParams struct {
	ID        pgtype.UUID        `json:"id"`
	Firstname string             `json:"firstname"`
	Lastname  string             `json:"lastname"`
	Email     string             `json:"email"`
	Age       int16              `json:"age"`
	Created   pgtype.Timestamptz `json:"created"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Age,
		arg.Created,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Age,
		&i.Created,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, firstname, lastname, email, age, created FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Age,
		&i.Created,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set   firstname = COALESCE($2, firstname),
  lastname = COALESCE($3, lastname),
  email = COALESCE($4, email),
  age = COALESCE($5, age)
WHERE id = $1
RETURNING id, firstname, lastname, email, age, created
`

type UpdateUserParams struct {
	ID        pgtype.UUID `json:"id"`
	Firstname string      `json:"firstname"`
	Lastname  string      `json:"lastname"`
	Email     string      `json:"email"`
	Age       int16       `json:"age"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Age,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Age,
		&i.Created,
	)
	return i, err
}
